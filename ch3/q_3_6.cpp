#include <stdio.h>#include <string.h>#include <algorithm>#define _LOCAL_#define MAX_PUZZLE_SCALE		(20)#define MAX_ELIGIBLE_SQUARES	(50)typedef struct{	int x;	int y;}stEligibleSquare;char puzzle[MAX_PUZZLE_SCALE][MAX_PUZZLE_SCALE] = {0};stEligibleSquare eligibleSquares[MAX_ELIGIBLE_SQUARES] = {0};int main(){#ifdef _LOCAL_	freopen("input_3_6.txt", "r", stdin);	freopen("output_3_6.txt", "w", stdout);#endif			int puzzleId = 1;    bool bFlag = true;    	while(1)	{		int squareCnt = 0;		int row = 0, column = 0;		// init		memset(puzzle, 0, sizeof(puzzle));		memset(eligibleSquares, 0, sizeof(stEligibleSquare));				char buffer[50] = {0};		scanf("%[^\n]", buffer);		getchar();			// read '\n'				if (buffer[0] == '0')			return 0;		else			sscanf(buffer, "%d %d", &row, &column);				// read whole puzzle		for (int r = 0; r < row; r++)		{			scanf("%[^\n]", puzzle[r]);			getchar();		// read '\n'			for (int c = 0; c < column; c++)			{				if ( puzzle[r][c] != '*' &&                     ((r - 1) < 0 || puzzle[r-1][c] == '*' ||					 (c - 1) < 0 || puzzle[r][c-1] == '*'))					{					eligibleSquares[squareCnt].x = r;					eligibleSquares[squareCnt].y = c;					squareCnt++;				}			}		}		        // printf("\n");        // for (int i = 0; i < squareCnt; i++)        // {            // printf("square[%d]: (%d, %d)\n", i, eligibleSquares[i].x, eligibleSquares[i].y);                    // }        // printf("\n");        		// printf("Puzzle #%d. (%d*%d)\n", puzzleId, row, column);		// for (int r = 0; r < row; r++)		// {			// for (int c = 0; c < column; c++)			// {				// printf("%c", puzzle[r][c]);			// }			// printf("\n");		// }#if 1		        if (bFlag)        {            bFlag = false;        }        else        {            printf("\n");                    }		printf("puzzle #%d:\nAcross", puzzleId);		for (int s = 0; s < squareCnt; s++)		{			int X = eligibleSquares[s].x;			int Y = eligibleSquares[s].y;						if (Y - 1 < 0 || puzzle[X][Y-1] == '*')			{				printf("\n%3d.", s + 1);								int y = Y;				while(puzzle[X][y] != '*' && y < column)				{					printf("%c", puzzle[X][y]);					y++;				}							}					}				printf("\nDown");		for (int s = 0; s < squareCnt; s++)		{			int X = eligibleSquares[s].x;			int Y = eligibleSquares[s].y;						if (X - 1 < 0 || puzzle[X-1][Y] == '*')			{				printf("\n%3d.", s + 1);								int x = X;				while(puzzle[x][Y] != '*' && x < row)				{					printf("%c", puzzle[x][Y]);					x++;				}							}					}                printf("\n");#endif		puzzleId++;			}}